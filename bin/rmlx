<?php

require __DIR__ . '/../vendor/autoload.php';

use Rmlx\RmlMapper;
use Rmlx\Component\ConsoleSinkComponent;



var_dump($argv);
$param = array();
if(count($argv)>1){
	$cnt = 0;
	//positional argument (indexed by number and not by string key)
	$posarg = array();
	foreach($argv as $k => $v){
		if(strpos($v, '=')){
			$pair = explode('=', $v);
			$param[$pair[0]] = $pair[1];
		}
		else if($k>0){
			$posarg[] = $v;
		}
		$cnt++;
	}

	if(count($posarg)==0){
		echo "no RML file specified";
		exit();
	}
	
	if(isset($param['memory_limit'])){
		ini_set('memory_limit', $param['memory_limit']);
		unset($param['memory_limit']);
	}

	if(isset($param['DEBUG']) && $param['DEBUG']=='on'){
		var_dump($param);
		var_dump($posarg);
	}

	$mapper = new RmlMapper($param);
	$mapper->load($posarg[0], "turtle");
	if(isset($param['output_file']))
		$mapper->set_output($param['output_file'], "ntriples");
	if(!isset($param['quiet']) || $param['quiet']=='off')
		$mapper->add_sink(new ConsoleSinkComponent());
	$output = $mapper->run();

}
else {
	echo "usage:\n php exec_rml.php mapping.rml.ttl [var_name=var_value]*\n\n";
	echo "special variables:\noutput_file:\twrite output RDF to filename";
	echo "\nsrc_dir:\tdirectory to get the local file for source";
	echo "\nmemory_limit:\tset memory limit for this process";
}

?>